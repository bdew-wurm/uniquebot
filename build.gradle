plugins {
    id "java"
}

group "net.bdew.wurm"
version "1.4"

repositories {
    mavenCentral()
    maven { url "https://m2.dv8tion.net/releases" }
    maven { url "https://gotti.no-ip.org/maven/repository" }
    maven { url 'https://jitpack.io' }
}

sourceSets {
    common
    bot
    mod
}

configurations {
    botDeps.extendsFrom botImplementation
    modDeps.extendsFrom modImplementation
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    botImplementation 'org.apache.commons:commons-lang3:3.12.0'
    botImplementation 'net.dv8tion:JDA:5.0.0-alpha.18'
    botImplementation 'org.slf4j:slf4j-jdk14:2.0.0'
    botImplementation 'com.typesafe:config:1.4.2'
    botImplementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6'
    botImplementation sourceSets.common.output

    modImplementation 'org.gotti.wurmunlimited:server-modlauncher:0.45'
    modImplementation 'com.github.bdew-wurm:bdew_server_mod_tools:v2.1.0'
    modImplementation sourceSets.common.output
}

task modJar(type: Jar) {
    from sourceSets.mod.output
    from sourceSets.common.output
    archiveFileName = "mod/${project.name}.jar"
}

task botJar(type: Jar) {
    from sourceSets.bot.output
    from sourceSets.common.output
    archiveFileName = "bot/${project.name}.jar"
    manifest {
        attributes(
                "Main-Class": "net.bdew.wurm.uniquebot.Main",
                "Class-Path": configurations.botDeps
                        .filter { !it.isDirectory() && !it.name.endsWith('.pom') }
                        .collect { "libs/" + it.getName() }.join(' ')
        )
    }
}

task dist(type: Zip) {
    into("mods", {
        into(project.name, {
            from modJar
        })
        from fileTree(dir: 'src/mod/props', include: '*')
    })
    into("libs", {
        from configurations.botDeps
                .filter { !it.isDirectory() && !it.name.endsWith('.pom') }
                .collect()
    })
    from botJar
    from files("application.conf.example", "logging.properties")
    archiveFileName = "${project.name}-${project.version}.zip"
}

task docker(type: Tar) {
    into("libs", {
        from configurations.botDeps
                .filter { !it.isDirectory() && !it.name.endsWith('.pom') }
                .collect()
    })
    from botJar
    archiveFileName = "docker.tar"
}